package Tiger2022.January;
/*
390. 消除游戏
列表 arr 由在范围 [1, n] 中的所有整数组成，并按严格递增排序。请你对 arr 应用下述算法：

从左到右，删除第一个数字，然后每隔一个数字删除一个，直到到达列表末尾。
重复上面的步骤，但这次是从右到左。也就是，删除最右侧的数字，然后剩下的数字每隔一个删除一个。
不断重复这两步，从左到右和从右到左交替进行，直到只剩下一个数字。
给你整数 n ，返回 arr 最后剩下的数字。



示例 1：

输入：n = 9
输出：6
解释：
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]
arr = [2, 4, 6, 8]
arr = [2, 6]
arr = [6]
示例 2：

输入：n = 1
输出：1


提示：

1 <= n <= 109
通过次数10,144提交次数20,003
 */

import org.junit.Test;

import java.util.ArrayList;

public class 消除游戏_390 {

    /*
        经历的回合数应该是 ⌊log2n⌋+1
        arr数组永远是一个等差数列
        arr数组的数目，每次减少一半（向下取整）
        公差每次翻倍
        a d n
            如何决定a的变化
            答：当删除数字时，存在以下四种情况：
                从左向右删除，总共有奇数个数字（第一位要删掉，最后一位要删掉）
                从左向右删除，总共有偶数个数字（第一位要删掉，最后一位不用删掉）
                从右向左删除，总共有奇数个数字（第一位要删掉，最后一位要删掉）
                从右向左删除，总共有偶数个数字（第一位不用删掉，最后一位要删掉）
    */
    public int lastRemaining(int n) {
        int a = 1; // 首项
        int d = 1; // 公差
        boolean l2r = true; // 从左向右删除
        while (n > 1) { // 长度
            if (l2r) {
                a += d;
            } else {
                if (n % 2 != 0)
                    a += d;
            }
            /*等同于：从左到右，每次都要消除第一个 || 从右到左，只要数组为奇数个，才会消除第一个
            if (l2r || n % 2 != 0)
                a += d;
            */
            l2r = !l2r;
            n /= 2;
            d *= 2;
        }
        return a;
    }

    @Test
    public void test() {
        int[] data = {2, 5, 8, 13, 15, 15, 15, 15, 15, 15, 20};
        ArrayList<String> list = new ArrayList<>();

    }

}